{"prompt": "I have below submodules in `/code/rtl` directory that together implement the functionality of a UART system:\n\n- `uart_tx`: Manages transmission including start/stop/parity handling.\n- `uart_rx`: Manages reception with start detection, oversampling, and parity checking.\n- `baud_gen`: Generates TX/RX baud clock pulses and manages enable signals.\n- `cdc_sync`: Synchronizes asynchronous RX input into the core clock domain.\n- `areset_sync`: Synchronizes asynchronous de-assertion of reset for clean transitions.\n\nThese modules need to be integrated into a top-level RTL module named `uart_top`.\n\nThe full specification for this top module is documented in **`docs/UART_Specifications.md`**. Please follow that spec precisely when wiring up ports, handling loopback behavior, and generating status outputs.\n\nThe final top-level module should:\n\n1. **Integrate** all submodules and connect them per the specification.\n2. **Support full-duplex UART** with loopback functionality when `i_lpbk_mode_en` is asserted.\n3. **Generate internal resets** for `uart_tx` and `uart_rx` using `areset_sync` based on `rstn`, `i_tx_rst`, and `i_rx_rst`.\n4. **Synchronize** the incoming RX signal using `cdc_sync`.\n5. **Use** the `baud_gen` module to generate TX and RX baud clocks and manage TX/RX enable signals.\n6. **Connect** valid-ready handshaking signals between the top-level and submodules.\n7. **Expose** all required control/status ports as defined in the spec, including `o_tx_state`, `o_rx_state`, `o_rx_break`, `o_parity_err`, and `o_frame_err`.\n\n#### Testbench Requirement:\nIn addition to creating the top module, develop a **SystemVerilog testbench** in `verif` directory that:\n- Instantiates `uart_top` and drives it with appropriate stimulus.\n- Initializes core and resets all domains.\n- Sends a variety of TX payloads with different configurations of:\n  - Parity (none/odd/even)\n  - Stop bits (1 or 2)\n  - Loopback mode enabled/disabled\n  - Break frame generation\n- Monitors and checks reception of expected data via the RX interface.\n- Includes at least one **loopback test** and one **normal TX-RX test** using serial wiring.\n- Logs and asserts for `parity_err`, `frame_err`, and `o_rx_break` for error-checking validation.\n- Uses the valid/ready handshake mechanism for TX and RX.\n- Covers corner cases like:\n  - Minimum and maximum baud rate values\n  - Data bursts and back-to-back transfers\n  - Simulated framing errors and parity mismatches (if possible)\n\nPlease implement this integrated top-level UART module as `uart_top` in a single SystemVerilog file named `uart_top.sv` and a separate testbench file named **`tb_uart_top.sv`** to demonstrate functionality and compliance with the spec.\n\n"}